name: Nightly

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      skip_fuzzing:
        description: 'Skip fuzzing tests'
        type: boolean
        default: false
      skip_stress:
        description: 'Skip stress tests'
        type: boolean
        default: false

concurrency:
  group: nightly-${{ github.ref }}
  cancel-in-progress: false # Never cancel nightly builds

env:
  ZIG_VERSION: 0.15.1

jobs:
  # Deep fuzzing with extensive iterations
  deep-fuzzing:
    name: Deep Fuzzing / ${{ matrix.target }}
    runs-on: ubuntu-latest
    timeout-minutes: 60 # 60 min
    if: github.event.inputs.skip_fuzzing != 'true'
    strategy:
      fail-fast: false
      matrix:
        target: [storage_logic, all_logic]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Zig
        uses: ./.github/actions/setup-zig

      - name: Restore Fuzz Corpus
        uses: actions/cache@v4
        with:
          path: fuzz-corpus-${{ matrix.target }}
          key: fuzz-corpus-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            fuzz-corpus-${{ matrix.target }}-

      - name: Run Deep Fuzzing
        run: |
          echo "========================================="
          echo "Deep fuzzing ${{ matrix.target }} target"
          echo "Running 100,000 iterations"
          echo "========================================="
          ./zig/zig build fuzz \
            -Dfuzz-iterations=100000 \
            -Dfuzz-corpus=fuzz-corpus-${{ matrix.target }} \
            -- ${{ matrix.target }}

      - name: Archive Crash Artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz-crashes-${{ matrix.target }}-${{ github.run_number }}
          path: |
            fuzz-corpus-${{ matrix.target }}/crashes/
            fuzz-corpus-${{ matrix.target }}/hangs/
          retention-days: 90

      - name: Save Updated Corpus
        if: always()
        uses: actions/cache/save@v4
        with:
          path: fuzz-corpus-${{ matrix.target }}
          key: fuzz-corpus-${{ matrix.target }}-${{ github.sha }}

  # Performance trending with historical comparison
  performance-trending:
    name: Performance Trending
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for comparisons

      - name: Setup Zig
        uses: ./.github/actions/setup-zig

      - name: Restore Performance History
        uses: actions/cache@v4
        with:
          path: |
            perf-history/
            bench-baseline.json
          key: perf-history-${{ github.ref }}-${{ github.run_number }}
          restore-keys: |
            perf-history-${{ github.ref }}-
            perf-history-

      - name: Run Extended Benchmarks
        run: |
          echo "========================================="
          echo "Running extended performance benchmarks"
          echo "50,000 iterations with 5,000 warmup"
          echo "========================================="

          mkdir -p perf-history
          set -o pipefail

          ./zig/zig build bench --release=fast \
            -Dbench-iterations=50000 \
            -Dbench-warmup=5000 \
            -Dbench-baseline=bench-baseline.json \
            -- --json \
            | tee perf-history/bench-${{ github.run_number }}.txt

          # Extract JSON results
          grep "^{" perf-history/bench-${{ github.run_number }}.txt > bench-baseline.json || true

      - name: Analyze Performance Trends
        run: |
          # Simple trend analysis
          PREV_RUN=$((${{ github.run_number }} - 1))
          if [ -f perf-history/bench-${PREV_RUN}.txt ]; then
            echo "Comparing with previous nightly run:"
            diff -u perf-history/bench-${PREV_RUN}.txt \
                    perf-history/bench-${{ github.run_number }}.txt || true
          fi

          # Check for major regressions
          if grep -q "REGRESSION.*[2-9][0-9]\." perf-history/bench-${{ github.run_number }}.txt; then
            echo "::error::Major performance regression detected (>20%)"
            exit 1
          fi

      - name: Save Performance History
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            perf-history/
            bench-baseline.json
          key: perf-history-${{ github.ref }}-${{ github.run_number }}

      - name: Upload Performance Report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ github.run_number }}
          path: perf-history/bench-${{ github.run_number }}.txt
          retention-days: 90

  # Expanded compatibility testing
  expanded-matrix:
    name: Expanded Matrix / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, macos-13, macos-14]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Zig
        uses: ./.github/actions/setup-zig

      - name: Build and Test
        run: |
          echo "Testing on ${{ matrix.os }} with Zig ${{ env.ZIG_VERSION }}"
          ./zig/zig build test -Dseed=0xBADCAFE1

  # Memory safety validation with multiple tools
  memory-safety:
    name: Memory Safety Validation
    runs-on: ubuntu-latest
    timeout-minutes: 90
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Zig
        uses: ./.github/actions/setup-zig

      - name: Install Analysis Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind

      - name: Build Debug Binary
        run: ./zig/zig build -Ddebug -Dseed=0xDEADBEEF

      - name: Run Valgrind Memcheck
        env:
          SKIP_PERFORMANCE_TESTS: "1"
        run: |
          echo "Running memory analysis on test binary..."
          valgrind \
            --tool=memcheck \
            --leak-check=full \
            --show-leak-kinds=all \
            --track-origins=yes \
            --expensive-definedness-checks=yes \
            --error-exitcode=1 \
            --gen-suppressions=all \
            --num-callers=40 \
            --log-file=valgrind-memcheck.txt \
            --read-var-info=no \
            --quiet \
            ./zig-out/bin/test

      - name: Run Valgrind Helgrind (Thread Safety)
        env:
          SKIP_PERFORMANCE_TESTS: "1"
        run: |
          echo "Checking for threading issues in test binary..."
          valgrind \
            --tool=helgrind \
            --error-exitcode=1 \
            --log-file=valgrind-helgrind.txt \
            --read-var-info=no \
            --quiet \
            ./zig-out/bin/test || true

      - name: Upload Memory Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: memory-safety-reports-${{ github.run_number }}
          path: valgrind-*.txt
          retention-days: 30

  # Nightly status summary
  nightly-summary:
    name: Nightly Summary
    needs: [deep-fuzzing, performance-trending, expanded-matrix, memory-safety]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check Status
        run: |
          echo "========================================="
          echo "Nightly Build Summary"
          echo "========================================="
          echo "Deep Fuzzing: ${{ needs.deep-fuzzing.result }}"
          echo "Performance: ${{ needs.performance-trending.result }}"
          echo "Compatibility: ${{ needs.expanded-matrix.result }}"
          echo "Memory Safety: ${{ needs.memory-safety.result }}"
          echo "========================================="

          # Fail if any critical job failed
          if [[ "${{ needs.deep-fuzzing.result }}" == "failure" ]] || \
             [[ "${{ needs.performance-trending.result }}" == "failure" ]] || \
             [[ "${{ needs.memory-safety.result }}" == "failure" ]]; then
            echo "::error::Nightly build failed"
            exit 1
          fi

      - name: Create Issue on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Nightly Build Failed - ${date}`,
              body: `The nightly build failed on ${date}.\n\nRun: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              labels: ['nightly-failure', 'automated']
            });

