name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  merge_group:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' }}

env:
  ZIG_VERSION: 0.15.1

jobs:
  # Quick validation checks that should pass before any other jobs
  validation:
    name: Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Zig
        uses: ./.github/actions/setup-zig

      - name: Check Formatting
        run: ./zig/zig build fmt-check

      - name: Check Style Rules
        run: ./zig/zig build tidy

      - name: Validate Build Configuration
        run: ./zig/zig build --help > /dev/null

  # Main test matrix with deterministic seeds
  test-matrix:
    name: Test / ${{ matrix.os }} / seed:${{ matrix.seed }}
    needs: validation
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        seed:
          - "0xDEADBEEF"
          - "0xCAFEBABE"
          - "0x8BADF00D"
          - "0xFEEDFACE"
          - "0x1337BEEF"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Zig
        uses: ./.github/actions/setup-zig

      - name: Cache Build Artifacts
        uses: actions/cache@v4
        with:
          path: |
            zig-cache
            zig-out
          key: ${{ runner.os }}-zig-${{ hashFiles('build.zig', 'src/**/*.zig') }}-${{ matrix.seed }}
          restore-keys: |
            ${{ runner.os }}-zig-${{ hashFiles('build.zig', 'src/**/*.zig') }}-
            ${{ runner.os }}-zig-

      - name: Run Unit Tests
        run: |
          echo "========================================="
          echo "Testing on ${{ matrix.os }} with seed: ${{ matrix.seed }}"
          echo "Reproduce failures with: ./zig/zig build test-unit -Dseed=${{ matrix.seed }}"
          echo "========================================="
          ./zig/zig build test-unit -Dseed=${{ matrix.seed }} -Dtest-iterations=3

      - name: Run Integration Tests
        run: ./zig/zig build test-integration -Dseed=${{ matrix.seed }}

      - name: Run E2E Tests
        run: ./zig/zig build test-e2e -Dseed=${{ matrix.seed }}

      - name: Upload Test Artifacts on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-failure-${{ matrix.os }}-${{ matrix.seed }}
          path: |
            zig-out/
            test-logs/
          retention-days: 7

  # Performance benchmarking and regression detection
  benchmarks:
    name: Benchmarks
    needs: validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for baseline comparison

      - name: Setup Zig
        uses: ./.github/actions/setup-zig

      - name: Download Previous Benchmark Results
        uses: actions/cache@v4
        with:
          path: bench-baseline.json
          key: benchmarks-v2-${{ runner.os }}-${{ github.base_ref || 'main' }}
          restore-keys: |
            benchmarks-v2-${{ runner.os }}-

      - name: Build KausalDB Binary
        run: |
          echo "Building KausalDB binaries..."
          ./zig/zig build --release=fast

          echo "Verifying binaries were created and work..."
          ./zig-out/bin/kausal --version
          ./zig-out/bin/kausal-server --version

      - name: Run Benchmarks
        timeout-minutes: 10
        run: |
          echo "Running benchmarks..."
          echo "Baseline file exists: $(test -f bench-baseline.json && echo yes || echo no)"

          # Run benchmarks with reduced iterations for CI
          # Show output directly to avoid hiding errors
          ./zig/zig build bench \
            --release=fast \
            -Dbench-iterations=5000 \
            -Dbench-warmup=500 \
            $(test -f bench-baseline.json && echo "-Dbench-baseline=bench-baseline.json" || echo "") \
            -- $(test -n "${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}" && echo "--save-baseline=bench-new-baseline.json" || echo "")

      - name: Check for Performance Regressions
        if: success()
        run: |
          echo "Benchmark completed successfully - no regressions detected"

      - name: Save Benchmark Results
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          if [ -f bench-new-baseline.json ]; then
            cp bench-new-baseline.json bench-baseline.json
            echo "Saved new baseline for future comparisons"
          else
            echo "No baseline file to save"
          fi

      - name: Upload Benchmark Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            bench-*.json
            *.log
          retention-days: 30

      - name: Comment PR with Benchmark Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Benchmark Results\n\nBenchmarks completed successfully. Check the [workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`
            });

  # Fuzzing for bug discovery
  fuzzing:
    name: Fuzzing
    needs: validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Zig
        uses: ./.github/actions/setup-zig

      - name: Restore Fuzz Corpus
        uses: actions/cache@v4
        with:
          path: fuzz-corpus
          # Use source hash + date to create evolving corpus cache
          key: fuzz-corpus-${{ hashFiles('src/**/*.zig') }}-${{ github.run_number }}
          restore-keys: |
            fuzz-corpus-${{ hashFiles('src/**/*.zig') }}-
            fuzz-corpus-

      - name: Run Quick Fuzz Test
        run: |
          ./zig/zig build fuzz-quick \
            -Dfuzz-corpus=fuzz-corpus

      # Note: Let's skip this for now since it takes around 20 minutes to finish. This makes the feedback
      # loop to slow and hurts DX. Rely on the quick fuzz on master and do more extensive fuzzing in nightly job.
      #
      # - name: Run Extended Fuzzing (main branch only)
      #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      #   run: |
      #     ./zig/zig build fuzz \
      #       -Dfuzz-iterations=10000 \
      #       -Dfuzz-corpus=fuzz-corpus

      - name: Save Corpus Statistics
        if: success() || failure()
        run: |
          echo "Fuzzing corpus statistics:"
          find fuzz-corpus -type f -name "*.bin" | wc -l || echo "0"
          du -sh fuzz-corpus/ || echo "0B"

      - name: Upload Crash Artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz-crashes
          path: |
            fuzz-corpus/crashes/
            fuzz-corpus/hangs/
          retention-days: 30

  # Release build verification
  release:
    name: Release Build / ${{ matrix.os }}
    needs: [test-matrix]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Zig
        uses: ./.github/actions/setup-zig

      - name: Build Release Binary
        run: |
          ./zig/zig build \
            --release=safe \
            -Dtarget=${{ matrix.os == 'ubuntu-latest' && 'x86_64-linux' || 'x86_64-macos' }}

      - name: Test Release Binary
        run: |
          ./zig-out/bin/kausal --version
          ./zig-out/bin/kausal --help
          ./zig-out/bin/kausal-server --version
          ./zig-out/bin/kausal-server --help

      - name: Package Release
        run: |
          tar -czf kausaldb-${{ matrix.os }}.tar.gz -C zig-out/bin kausal kausal-server

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}
          path: kausaldb-${{ matrix.os }}.tar.gz
          retention-days: 30

  # Final status check
  ci-status:
    name: CI Status
    needs: [validation, test-matrix, benchmarks, fuzzing, release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check CI Status
        if: |
          needs.validation.result != 'success' ||
          needs.test-matrix.result != 'success' ||
          needs.benchmarks.result != 'success' ||
          needs.fuzzing.result != 'success' ||
          needs.release.result != 'success'
        run: |
          echo "::error::CI pipeline failed"
          exit 1

      - name: CI Success
        if: success()
        run: echo "CI pipeline passed successfully"
