name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  merge_group:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' }}

jobs:
  # ================================================================================
  # SMOKE: Fast feedback for all changes (< 2 minutes)
  # ================================================================================
  smoke:
    name: Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Zig
        uses: ./.github/actions/setup-zig

      - name: CI Smoke Tests
        run: ./zig/zig build ci-smoke

  # ================================================================================
  # TEST: Core functionality validation (< 15 minutes)
  # ================================================================================
  test:
    name: Core Tests
    runs-on: ubuntu-latest
    needs: smoke
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Zig
        uses: ./.github/actions/setup-zig

      - name: CI Full Pipeline
        run: ./zig/zig build ci-full

      - name: Performance Validation
        run: ./zig/zig build ci-perf

      - name: Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ubuntu
          path: |
            zig-out/
            test-results/
          retention-days: 3

  # ================================================================================
  # CLIENTS: Cross-platform matrix testing
  # ================================================================================
  clients:
    name: Platform Matrix (${{ matrix.target.name }})
    runs-on: ${{ matrix.target.os }}
    needs: smoke
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        target:
          - { name: "ubuntu-debug", os: "ubuntu-latest", optimize: "Debug" }
          - {
              name: "ubuntu-releasesafe",
              os: "ubuntu-latest",
              optimize: "ReleaseSafe",
            }
          - {
              name: "macos-releasesafe",
              os: "macos-latest",
              optimize: "ReleaseSafe",
            }

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Zig
        uses: ./.github/actions/setup-zig

      - name: Cache Build Artifacts
        uses: actions/cache@v4
        with:
          path: |
            zig-cache/
            zig-out/
          key: build-${{ matrix.target.name }}-${{ hashFiles('build.zig', 'build.zig.zon', 'src/**/*.zig') }}

      - name: Build and Test
        run: |
          ./zig/zig build ci-full -Doptimize=${{ matrix.target.optimize }}

      - name: Platform-Specific Performance Check
        if: matrix.target.name == 'ubuntu-releasesafe'
        run: ./zig/zig build ci-perf -Doptimize=${{ matrix.target.optimize }}

      - name: Upload Platform Artifacts
        if: matrix.target.name == 'ubuntu-releasesafe'
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target.name }}
          path: zig-out/bin/
          retention-days: 7

  # ================================================================================
  # FUZZING: Dedicated fuzz testing for bug discovery
  # ================================================================================
  fuzzing:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Zig
        uses: ./.github/actions/setup-zig

      - name: Run Fuzz Tests
        run: ./zig/zig build fuzz all 10

      - name: Upload Fuzz Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz-results
          path: |
            fuzz-results/
            crash-reports/
          retention-days: 7

  # ================================================================================
  # COMPREHENSIVE: Stress testing and security (merge queue & main only)
  # ================================================================================
  comprehensive:
    name: Comprehensive Validation
    runs-on: ubuntu-latest
    needs: [test, clients, fuzzing]
    if: github.event_name == 'merge_group' || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'))
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Zig
        uses: ./.github/actions/setup-zig

      - name: Stress Testing
        run: ./zig/zig build ci-stress

      - name: Security Analysis
        run: ./zig/zig build ci-security

      - name: Upload Comprehensive Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-validation
          path: |
            stress-results/
            security-results/
            performance-results/
          retention-days: 14

  # ================================================================================
  # MEMORY SAFETY: AddressSanitizer validation (critical paths only)
  # ================================================================================
  memory-safety:
    name: Memory Safety
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'merge_group' || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) || contains(github.event.pull_request.labels.*.name, 'memory-check')
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Zig
        uses: ./.github/actions/setup-zig

      - name: Install Valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind

      - name: Memory Safety Analysis
        run: |
          echo "Running memory safety checks..."
          ./zig/zig build ci-security
          echo "Memory safety validation completed"

      - name: Valgrind Analysis (Critical Components)
        run: |
          ./zig/zig build -Doptimize=ReleaseSafe
          echo "Testing storage engine under Valgrind..."
          valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all \
            --track-origins=yes --verbose --error-exitcode=1 \
            ./zig-out/bin/kausaldb --test-mode > valgrind-report.txt 2>&1 || true
          echo "Valgrind analysis completed"

      - name: Upload Memory Analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: memory-safety-report
          path: valgrind-report.txt
          retention-days: 7

  # ================================================================================
  # QUALITY GATE: Final validation checkpoint
  # ================================================================================
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [smoke, test, clients]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Evaluate Quality Standards
        run: |
          # Check if all required jobs passed
          SMOKE_STATUS="${{ needs.smoke.result }}"
          TEST_STATUS="${{ needs.test.result }}"
          CLIENTS_STATUS="${{ needs.clients.result }}"

          echo "╔══════════════════════════════════════════════════════════════════╗"
          echo "║                        CI QUALITY GATE                           ║"
          echo "╚══════════════════════════════════════════════════════════════════╝"
          echo
          echo "Job Status Summary:"
          echo "  Smoke Tests: $SMOKE_STATUS"
          echo "  Core Tests: $TEST_STATUS"
          echo "  Platform Matrix: $CLIENTS_STATUS"
          echo

          # Determine overall result
          if [[ "$SMOKE_STATUS" == "success" && "$TEST_STATUS" == "success" && "$CLIENTS_STATUS" == "success" ]]; then
            echo "[+] QUALITY GATE: PASSED"
            echo "All critical validation checks completed successfully"
            echo
            echo "System Ready For:"
            echo "  [+] Code review and merge"
            echo "  [+] Deployment to staging"
            echo "  [+] Performance benchmarking"
            echo
            exit 0
          else
            echo "[-] QUALITY GATE: FAILED"
            echo
            echo "Failed Checks:"
            [[ "$SMOKE_STATUS" != "success" ]] && echo "  [-] Smoke tests failed - basic functionality issues"
            [[ "$TEST_STATUS" != "success" ]] && echo "  [-] Core tests failed - system reliability issues"
            [[ "$CLIENTS_STATUS" != "success" ]] && echo "  [-] Platform tests failed - cross-platform compatibility issues"
            echo
            echo "[!] BLOCKING DEPLOYMENT"
            echo "Fix failing checks before merge"
            exit 1
          fi
