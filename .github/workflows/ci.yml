name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4

      - name: Extract Zig version
        id: zig-version
        run: |
          ZIG_VERSION=$(grep 'ZIG_RELEASE_DEFAULT=' scripts/install-zig.sh | sed 's/.*="\([^"]*\)".*/\1/')
          echo "version=$ZIG_VERSION" >> $GITHUB_OUTPUT
          echo "Extracted Zig version: $ZIG_VERSION"

      - name: Setup Zig
        run: |
          chmod +x scripts/install-zig.sh
          ./scripts/install-zig.sh
          echo "${GITHUB_WORKSPACE}/zig" >> $GITHUB_PATH

      - name: Cache Zig artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/zig
            zig-cache
            zig-out
          key: ${{ runner.os }}-zig-${{ steps.zig-version.outputs.version }}-${{ hashFiles('build.zig', 'build.zig.zon') }}-test
          restore-keys: |
            ${{ runner.os }}-zig-${{ steps.zig-version.outputs.version }}-${{ hashFiles('build.zig', 'build.zig.zon') }}-
            ${{ runner.os }}-zig-${{ steps.zig-version.outputs.version }}-

      - name: Check formatting
        run: zig fmt --check .

      - name: Build debug
        run: zig build

      - name: Run tests
        run: zig build test

      - name: Run tidy checks
        run: zig build tidy

      - name: Build all targets
        run: |
          echo "-> Building benchmark target..."
          zig build benchmark
          echo "-> Building fuzz target..."
          zig build fuzz

      - name: Build release
        run: zig build --release=safe

  build-matrix:
    name: Build
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Extract Zig version
        id: zig-version
        run: |
          ZIG_VERSION=$(grep 'ZIG_RELEASE_DEFAULT=' scripts/install-zig.sh | sed 's/.*="\([^"]*\)".*/\1/')
          echo "version=$ZIG_VERSION" >> $GITHUB_OUTPUT
          echo "Extracted Zig version: $ZIG_VERSION"

      - name: Setup Zig
        run: |
          chmod +x scripts/install-zig.sh
          ./scripts/install-zig.sh
          echo "${GITHUB_WORKSPACE}/zig" >> $GITHUB_PATH

      - name: Cache Zig artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/zig
            zig-cache
            zig-out
          key: ${{ runner.os }}-zig-${{ steps.zig-version.outputs.version }}-${{ hashFiles('build.zig', 'build.zig.zon') }}-build
          restore-keys: |
            ${{ runner.os }}-zig-${{ steps.zig-version.outputs.version }}-${{ hashFiles('build.zig', 'build.zig.zon') }}-
            ${{ runner.os }}-zig-${{ steps.zig-version.outputs.version }}-

      - name: Validate build system
        run: |
          echo "-> Validating build on ${{ matrix.os }}..."
          zig build --help

      - name: Build release
        run: zig build --release=safe

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Extract Zig version
        id: zig-version
        run: |
          ZIG_VERSION=$(grep 'ZIG_RELEASE_DEFAULT=' scripts/install-zig.sh | sed 's/.*="\([^"]*\)".*/\1/')
          echo "version=$ZIG_VERSION" >> $GITHUB_OUTPUT
          echo "Extracted Zig version: $ZIG_VERSION"

      - name: Setup Zig
        run: |
          chmod +x scripts/install-zig.sh
          ./scripts/install-zig.sh
          echo "${GITHUB_WORKSPACE}/zig" >> $GITHUB_PATH

      - name: Cache Zig artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/zig
            zig-cache
            zig-out
          key: ${{ runner.os }}-zig-${{ steps.zig-version.outputs.version }}-${{ hashFiles('build.zig', 'build.zig.zon') }}-coverage
          restore-keys: |
            ${{ runner.os }}-zig-${{ steps.zig-version.outputs.version }}-${{ hashFiles('build.zig', 'build.zig.zon') }}-

      - name: Generate coverage
        run: zig build test -- --summary all

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Extract Zig version
        id: zig-version
        run: |
          ZIG_VERSION=$(grep 'ZIG_RELEASE_DEFAULT=' scripts/install-zig.sh | sed 's/.*="\([^"]*\)".*/\1/')
          echo "version=$ZIG_VERSION" >> $GITHUB_OUTPUT
          echo "Extracted Zig version: $ZIG_VERSION"

      - name: Setup Zig
        run: |
          chmod +x scripts/install-zig.sh
          ./scripts/install-zig.sh
          echo "${GITHUB_WORKSPACE}/zig" >> $GITHUB_PATH

      - name: Check for banned patterns
        run: |
          echo "-> Checking for banned patterns..."
          if grep -r "std\.BoundedArray" src/; then
            echo "Error: Found banned pattern std.BoundedArray"
            exit 1
          fi
          if grep -r "std\.StaticBitSet" src/; then
            echo "Error: Found banned pattern std.StaticBitSet"
            exit 1
          fi
          if grep -r "FIXME\|TODO" src/ --include="*.zig"; then
            echo "Warning: Found FIXME/TODO comments in source"
          fi

      - name: Check commit message format
        if: github.event_name == 'pull_request'
        run: |
          echo "-> Checking PR title format..."
          if ! echo "${{ github.event.pull_request.title }}" | grep -E '^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+'; then
            echo "Warning: PR title doesn't follow conventional commit format"
          fi

  security:
    name: Security
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Check for secrets
        run: |
          echo "-> Scanning for potential secrets..."
          if grep -r -i "password\|secret\|key\|token" src/ --include="*.zig" | grep -v "// "; then
            echo "Warning: Potential hardcoded secrets found"
          fi

      - name: Check file permissions
        run: |
          echo "-> Checking file permissions..."
          find . -type f -perm /111 -name "*.zig" | while read file; do
            echo "Warning: Executable Zig source file: $file"
          done

      - name: Validate project structure
        run: |
          echo "-> Validating project structure..."
          if [ ! -f "build.zig" ]; then
            echo "Error: Missing build.zig"
            exit 1
          fi
          if [ ! -f "build.zig.zon" ]; then
            echo "Error: Missing build.zig.zon"
            exit 1
          fi
          if [ ! -d "src" ]; then
            echo "Error: Missing src directory"
            exit 1
          fi
