#!/bin/sh
#
# KausalDB pre-push hook
#
# This script catches CI failures locally before push by running:
# - Cross-platform compilation matrix
# - Build mode validation (Debug/ReleaseFast)
# - Critical integration tests that frequently fail in CI
# - Performance regression detection
# - Dependency validation
#
# Designed to reduce CI failure rate from ~30-40% to <5%
# Target runtime: 2-3 minutes for validation
#
# To bypass: SKIP_PREPUSH=1 git push (emergency use only)

set -e

# Allow bypass for emergency pushes
if [ "${SKIP_PREPUSH:-0}" = "1" ]; then
    echo "[INFO] Pre-push checks bypassed with SKIP_PREPUSH=1"
    echo "       Use responsibly - CI will still run full validation"
    exit 0
fi

echo "KausalDB Pre-Push Validation Pipeline"
echo "========================================"

# Check if we're in a git repository
if ! git rev-parse --git-dir >/dev/null 2>&1; then
    echo "- Error: Not in a git repository"
    exit 1
fi

# Check if project zig is available
if [ ! -x "./zig/zig" ]; then
    echo "- Error: Project Zig not found. Run './scripts/install_zig.sh' to install."
    exit 1
fi

# Start timing
PIPELINE_START=$(date +%s)

# Function to print colored output with emojis
print_status() {
    local status=$1
    local message=$2
    case $status in
        "OK")
            echo "+ $message"
            ;;
        "FAIL")
            echo "- $message"
            ;;
        "INFO")
            echo "INFO: $message"
            ;;
        "WARN")
            echo "WARN: $message"
            ;;
        "PROGRESS")
            echo "PROGRESS: $message"
            ;;
    esac
}

# Track overall success
PIPELINE_SUCCESS=true

# Get list of changed files for optimization
CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD 2>/dev/null || git diff --cached --name-only)
CHANGED_ZIG_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(zig)$' || true)
NUM_ZIG_FILES=$(echo "$CHANGED_ZIG_FILES" | wc -l | tr -d ' ')

if [ "$NUM_ZIG_FILES" -gt 0 ]; then
    print_status "INFO" "Validating $NUM_ZIG_FILES changed Zig files for production readiness"
else
    print_status "INFO" "No Zig files changed - running minimal validation suite"
fi

# Create temporary files for parallel execution results
CROSS_COMPILE_OUTPUT=$(mktemp)
BUILD_MATRIX_OUTPUT=$(mktemp)
CRITICAL_TESTS_OUTPUT=$(mktemp)
PERFORMANCE_OUTPUT=$(mktemp)

# Cleanup function
cleanup() {
    rm -f "$CROSS_COMPILE_OUTPUT" "$BUILD_MATRIX_OUTPUT" "$CRITICAL_TESTS_OUTPUT" "$PERFORMANCE_OUTPUT"
}
trap cleanup EXIT

# Phase 1: Code Quality Validation (Fast)
print_status "PROGRESS" "Phase 1: Code Quality & Style Validation"
QUALITY_START=$(date +%s)

# Run existing pre-commit checks (formatting, tidy, compilation)
if ! ./.githooks/pre-commit; then
    print_status "FAIL" "Code quality checks failed - fix issues before pushing"
    PIPELINE_SUCCESS=false
else
    QUALITY_END=$(date +%s)
    QUALITY_DURATION=$((QUALITY_END - QUALITY_START))
    print_status "OK" "Code quality validation passed (${QUALITY_DURATION}s)"
fi

# Phase 2: Cross-Platform Compilation Matrix
print_status "PROGRESS" "Phase 2: Cross-Platform Compilation Validation"
CROSS_START=$(date +%s)

# Define critical target platforms that frequently cause CI failures
TARGETS=(
    "x86_64-linux-gnu"      # Most common CI target
    "aarch64-linux-gnu"     # ARM64 Linux (Docker, cloud instances)
    "x86_64-macos"          # macOS Intel
    "aarch64-macos"         # macOS ARM64 (M1/M2)
)

CROSS_COMPILE_SUCCESS=true
{
    echo "Cross-compilation results:"
    for target in "${TARGETS[@]}"; do
        printf "  %-20s: " "$target"
        if ./zig/zig build -Dtarget="$target" >/dev/null 2>&1; then
            echo "+ SUCCESS"
        else
            echo "- FAILED"
            CROSS_COMPILE_SUCCESS=false
        fi
    done
} > "$CROSS_COMPILE_OUTPUT"

if [ "$CROSS_COMPILE_SUCCESS" = true ]; then
    CROSS_END=$(date +%s)
    CROSS_DURATION=$((CROSS_END - CROSS_START))
    print_status "OK" "Cross-platform compilation passed (${CROSS_DURATION}s)"
else
    print_status "FAIL" "Cross-platform compilation failed:"
    cat "$CROSS_COMPILE_OUTPUT"
    PIPELINE_SUCCESS=false
fi

# Phase 3: Build Mode Matrix (Debug/Release Issues)
print_status "PROGRESS" "Phase 3: Build Mode Validation (Debug/Release)"
BUILD_START=$(date +%s)

BUILD_MODES=(
    "Debug"         # Debug build issues (missing imports, etc.)
    "ReleaseFast"   # Optimization issues, different behavior
)

BUILD_MATRIX_SUCCESS=true
{
    echo "Build mode validation results:"
    for mode in "${BUILD_MODES[@]}"; do
        printf "  %-15s: " "$mode"
        if ./zig/zig build -Doptimize="$mode" >/dev/null 2>&1; then
            echo "+ SUCCESS"
        else
            echo "- FAILED"
            BUILD_MATRIX_SUCCESS=false
        fi
    done
} > "$BUILD_MATRIX_OUTPUT"

if [ "$BUILD_MATRIX_SUCCESS" = true ]; then
    BUILD_END=$(date +%s)
    BUILD_DURATION=$((BUILD_END - BUILD_START))
    print_status "OK" "Build mode validation passed (${BUILD_DURATION}s)"
else
    print_status "FAIL" "Build mode validation failed:"
    cat "$BUILD_MATRIX_OUTPUT"
    PIPELINE_SUCCESS=false
fi

# Phase 4: Critical Integration Tests (CI Failure Hotspots)
print_status "PROGRESS" "Phase 4: Critical Integration Tests"
TESTS_START=$(date +%s)

# These are the tests that frequently fail in CI and should be caught locally
CRITICAL_TESTS=(
    "integration_server_coordinator"  # Server lifecycle (frequent CI failure)
    "memory_profiling_validation"    # Memory profiling (frequent CI failure)
    "unit-test"                      # Core functionality
    "fault_injection_storage_faults"        # Storage fault tolerance
)

CRITICAL_TESTS_SUCCESS=true
{
    echo "Critical integration test results:"
    for test in "${CRITICAL_TESTS[@]}"; do
        printf "  %-30s: " "$test"
        if ./zig/zig build "$test" >/dev/null 2>&1; then
            echo "+ PASSED"
        else
            echo "- FAILED"
            CRITICAL_TESTS_SUCCESS=false
        fi
    done
} > "$CRITICAL_TESTS_OUTPUT"

if [ "$CRITICAL_TESTS_SUCCESS" = true ]; then
    TESTS_END=$(date +%s)
    TESTS_DURATION=$((TESTS_END - TESTS_START))
    print_status "OK" "Critical integration tests passed (${TESTS_DURATION}s)"
else
    print_status "FAIL" "Critical integration tests failed:"
    cat "$CRITICAL_TESTS_OUTPUT"
    print_status "INFO" "These are the tests that frequently fail in CI"
    PIPELINE_SUCCESS=false
fi

# Phase 5: Performance Regression Detection
print_status "PROGRESS" "Phase 5: Performance Regression Detection"
PERF_START=$(date +%s)

# Quick benchmark to catch major performance regressions
PERFORMANCE_SUCCESS=true
if command -v ./zig-out/bin/benchmark >/dev/null 2>&1; then
    {
        echo "Performance regression check:"
        # Run quick storage benchmark (most critical for performance)
        if timeout 30s ./zig-out/bin/benchmark storage --quick 2>&1; then
            echo "+ Performance benchmarks completed"
        else
            echo "- Performance benchmarks failed or timed out"
            PERFORMANCE_SUCCESS=false
        fi
    } > "$PERFORMANCE_OUTPUT" 2>&1
else
    # Build benchmark if not available
    if ./zig/zig build benchmark >/dev/null 2>&1; then
        {
            echo "Performance regression check:"
            if timeout 30s ./zig-out/bin/benchmark storage --quick 2>&1; then
                echo "+ Performance benchmarks completed"
            else
                echo "- Performance benchmarks failed or timed out"
                PERFORMANCE_SUCCESS=false
            fi
        } > "$PERFORMANCE_OUTPUT" 2>&1
    else
        {
            echo "WARN: Benchmark binary not available - skipping performance check"
        } > "$PERFORMANCE_OUTPUT"
    fi
fi

if [ "$PERFORMANCE_SUCCESS" = true ]; then
    PERF_END=$(date +%s)
    PERF_DURATION=$((PERF_END - PERF_START))
    print_status "OK" "Performance regression check passed (${PERF_DURATION}s)"
else
    print_status "WARN" "Performance regression check had issues:"
    cat "$PERFORMANCE_OUTPUT"
    print_status "INFO" "Performance issues don't block push but should be investigated"
fi

# Phase 6: Dependency Validation
print_status "PROGRESS" "Phase 6: Dependency & Import Validation"
DEP_START=$(date +%s)

# Check for common dependency issues that cause CI failures
DEP_SUCCESS=true

# Look for potential libc dependencies without proper guards
if grep -r "linkLibC\|@cImport" src/ tests/ 2>/dev/null | grep -v "// libc-ok" >/dev/null; then
    print_status "WARN" "Found potential libc dependencies - ensure proper conditional compilation"
    print_status "INFO" "Add '// libc-ok' comment if intentional and properly guarded"
fi

# Check for missing imports (common CI failure)
if ! ./zig/zig build check >/dev/null 2>&1; then
    print_status "FAIL" "Import/dependency validation failed"
    DEP_SUCCESS=false
else
    DEP_END=$(date +%s)
    DEP_DURATION=$((DEP_END - DEP_START))
    print_status "OK" "Dependency validation passed (${DEP_DURATION}s)"
fi

# Final Pipeline Results
echo ""
echo "Pre-Push Pipeline Summary"
echo "============================="

PIPELINE_END=$(date +%s)
TOTAL_DURATION=$((PIPELINE_END - PIPELINE_START))

if [ "$PIPELINE_SUCCESS" = true ]; then
    print_status "OK" "All critical validations passed! (${TOTAL_DURATION}s total)"
    echo ""
    echo "Ready to push - high confidence this will pass CI"
    echo ""
    echo "Pipeline phases:"
    echo "  + Code quality & style validation"
    echo "  + Cross-platform compilation (4 targets)"
    echo "  + Build mode validation (Debug/Release)"
    echo "  + Critical integration tests"
    echo "  + Performance regression detection"
    echo "  + Dependency & import validation"
    echo ""
    echo "Estimated CI success probability: >95%"
    exit 0
else
    print_status "FAIL" "Pre-push validation failed!"
    echo ""
    echo "- Issues found that will likely cause CI failures:"

    if [ "$CROSS_COMPILE_SUCCESS" != true ]; then
        echo "  â€¢ Cross-platform compilation issues"
    fi
    if [ "$BUILD_MATRIX_SUCCESS" != true ]; then
        echo "  â€¢ Build mode compatibility issues"
    fi
    if [ "$CRITICAL_TESTS_SUCCESS" != true ]; then
        echo "  â€¢ Critical integration test failures"
    fi
    if [ "$DEP_SUCCESS" != true ]; then
        echo "  â€¢ Dependency/import issues"
    fi

    echo ""
    echo "Fix these issues before pushing to avoid CI failures"
    echo ""
    echo "Quick fixes:"
    echo "  â€¢ Run './zig/zig build fmt-fix' for formatting"
    echo "  â€¢ Run './zig/zig build tidy' for style issues"
    echo "  â€¢ Check build logs for specific compilation errors"
    echo ""
    echo "Emergency bypass (not recommended):"
    echo "  SKIP_PREPUSH=1 git push"
    echo ""
    exit 1
fi
